# unbound-dns - an Ansible playbook to configure Unbound for PiHole
# Copyright (C) 2023  Charles German <5donuts@pm.me>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
---
unbound_bind_addr: 127.0.0.1
unbound_test_addr: 127.0.0.1
unbound_port: 5335

# See: https://docs.pi-hole.net/guides/dns/unbound/#configure-unbound
verbosity: 0

do_ip4: "yes"
do_udp: "yes"
do_tcp: "yes"

# May be set to yes if you have IPv6 connectivity
do_ip6: "no"

# You want to leave this to no unless you have *native* IPv6. With 6to4 and
# Terredo tunnels your web browser should favor IPv4 for the same reasons
prefer_ip6: "no"

# Trust glue only if it is within the server's authority
harden_glue: "yes"

# Require DNSSEC data for trust-anchored zones, if such data is absent, the zone becomes BOGUS
harden_dnssec_stripped: "yes"

# Don't use Capitalization randomization as it known to cause DNSSEC issues sometimes
# see https://discourse.pi-hole.net/t/unbound-stubby-or-dnscrypt-proxy/9378 for further details
use_caps_for_id: "no"

# Reduce EDNS reassembly buffer size.
# From https://docs.pi-hole.net/guides/dns/unbound/#configure-unbound:
# IP fragmentation is unreliable on the Internet today, and can cause
# transmission failures when large DNS messages are sent via UDP. Even
# when fragmentation does work, it may not be secure; it is theoretically
# possible to spoof parts of a fragmented DNS message, without easy
# detection at the receiving end. Recently, there was an excellent study
# >>> Defragmenting DNS - Determining the optimal maximum UDP response size for DNS <<<
# by Axel Koolhaas, and Tjeerd Slokker (https://indico.dns-oarc.net/event/36/contributions/776/)
# in collaboration with NLnet Labs explored DNS using real world data from the
# the RIPE Atlas probes and the researchers suggested different values for
# IPv4 and IPv6 and in different scenarios. They advise that servers should
# be configured to limit DNS messages sent over UDP to a size that will not
# trigger fragmentation on typical network links. DNS servers can switch
# from UDP to TCP when a DNS response is too big to fit in this limited
# buffer size. This value has also been suggested in DNS Flag Day 2020.
edns_buffer_size: 1232

# Perform prefetching of close to expired message cache entries
# This only applies to domains that have been frequently queried
prefetch: "yes"

# One thread should be sufficient, can be increased on beefy machines. In reality for most users
# running on small networks or on a single machine, it should be unnecessary to seek performance
# enhancement by increasing num-threads above 1.
num_threads: 1

# Ensure kernel buffer is large enough to not lose messages in traffic spikes
so_rcvbuf: 1m

# Ensure privacy of local IP ranges
private_addresses:
  - 192.168.0.0/16
  - 169.254.0.0/16
  - 172.16.0.0/12
  - 10.0.0.0/8
  - fd00::/8
  - fe80::/10
